name: OSAL standalone MCDC 

on:
  push:
  pull_request:

# Force bash to apply pipefail option so pipeline failures aren't masked
defaults:
  run:
    shell: bash
    
env:
  SIMULATION: native
  ENABLE_UNIT_TESTS: true
  OMIT_DEPRECATED: true
  BUILDTYPE: debug
  
jobs:
  # Checks for duplicate actions. Skips push actions if there is a matching or
  # duplicate pull-request action.
  checks-for-duplicates:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          skip_after_successful_duplicate: 'true'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  mcdc:
    needs: checks-for-duplicates
    if: ${{ needs.checks-for-duplicates.outputs.should_skip != 'true' || contains(github.ref, 'main') }}
    name: Build and Run MCDC
    runs-on: ubuntu-20.04
    container: ghcr.io/arielswalker/mcdc:latest

    steps:                  
      - name: Checkout Bundle Workflow Scripts
        uses: actions/checkout@v4
        with:
          repository: arielswalker/cFS
          ref: test-mcdc  
          sparse-checkout: |
            .github

      - name: Checkout OSAL
        uses: actions/checkout@v4        
        with:
          path: source
          
      - name: Modify osal to include coverage flags
        run: |
          sed -i 's/target_compile_options(ut_coverage_compile INTERFACE -pg -ftest-coverage -fprofile-arcs)/target_compile_options(ut_coverage_compile INTERFACE -pg -O0 -fprofile-arcs -ftest-coverage -fcondition-coverage -fprofile-abs-path)/' source/src/bsp/generic-linux/CMakeLists.txt
      
      - name: Set up build
        run: cmake
          -DCMAKE_BUILD_TYPE=Debug
          -DENABLE_UNIT_TESTS=TRUE
          -DOSAL_OMIT_DEPRECATED=TRUE
          -DOSAL_VALIDATE_API=FALSE
          -DOSAL_INSTALL_LIBRARIES=FALSE
          -DOSAL_CONFIG_DEBUG_PERMISSIVE_MODE=TRUE
          -DOSAL_SYSTEM_BSPTYPE=generic-linux
          -DCMAKE_PREFIX_PATH=/usr/lib/cmake
          -DCMAKE_INSTALL_PREFIX=/usr
          -S source
          -B build          

      - name: Build OSAL
        working-directory: build
        run: make VERBOSE=1

      - name: Execute Tests
        working-directory: build
        run: |
          echo "BASE_DIR=build/unit-test-coverage" >> $GITHUB_ENV
          ctest --output-on-failure -j4 2>&1 | tee ../test_results.txt

      - name: Grab test modules
        if: success() || failure()
        run: |
          echo "MODULES=$(grep -oP 'Test #\d+: \K[\w\-\_]+' test_results.txt | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_ENV
          grep -oP 'Test #\d+: \K[\w\-\_]+' test_results.txt | tr '\n' ' ' | sed 's/ $//' >> modules.txt
          
      - name: Run mcdc analysis
        if: success() || failure()
        run: bash .github/scripts/mcdc-analyze.sh
      
      - name: Save PR number
        if: github.event_name == 'pull_request' && always()
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: echo $PR_NUMBER > pr_number
        
      - name: Archive unit test results
        # Upload if success or failure which supports skipping, unlike always()
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: Unit test results
          path: |
            test_results.txt
      
      - name: Archive mcdc results
        # Upload if success or failure which supports skipping, unlike always()
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MCDC results
          path: |
            **/*.gcov
            mcdc_results.txt
            pr_number
            modules.txt
            
  comment-mcdc:
    needs: mcdc
    if: github.event_name == 'pull_request' && always()
    name: Comment MCDC Comparision on PR
    runs-on: ubuntu-20.04

    steps:        

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          repository: ArielSAdams/cFE
          ref: trigger-comment-yml

      - name: Download latest main branch artifact      
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: mcdc.yml
          branch: main
          name: MCDC results
          path: ./main-branch-results

      - uses: actions/download-artifact@v4
        with:
          name: MCDC results
        
      # Add step to reference new script that calculates difference between main artifact and pr artifact
      - name: Compare main and PR artifacts      
        run: |
          bash .github/scripts/mcdc-compare.sh main-branch-results/mcdc_results.txt mcdc_results.txt modules.txt

      - name: Comment comparison to pull request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
              const path = require('path');
              // Adjust the path based on where you see mcdc_results.txt after running the 'ls' command
              const mcdcResultsFilePath = path.join(process.env.GITHUB_WORKSPACE, 'mcdc_comment.txt');
              // Debugging: Check if the file exists at the adjusted path
              if (!fs.existsSync(mcdcResultsFilePath)) {
                console.log('mcdc_comment.txt file not found at path: ' + mcdcResultsFilePath);
                return;
              }
              const mcdcResults = `MCDC Results:
              \`\`\`
              ${fs.readFileSync(mcdcResultsFilePath, 'utf-8')}
              \`\`\`
              `;
              // Ensure the correct path to the pr_number file after unzipping
              const prNumberPath = path.join(process.env.GITHUB_WORKSPACE, 'pr_number');
              if (!fs.existsSync(prNumberPath)) {
                console.log('pr_number file not found at path: ' + prNumberPath);
                return;
              }
              const prNumber = Number(fs.readFileSync(prNumberPath));
              const comments = await github.paginate(
                github.rest.issues.listComments,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                }
              );
              comments.reverse();
              const previousComment = comments.find(comment =>
                comment.user.login === 'github-actions[bot]'
              );
              if (previousComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: previousComment.id,
                  body: mcdcResults,
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: mcdcResults,
                });

              
      - name: Archive mcdc comparison
        # Upload if success or failure which supports skipping, unlike always()
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: MCDC main branch comparison
          path: |
            mcdc_comment.txt
            mcdc_compare.txt
